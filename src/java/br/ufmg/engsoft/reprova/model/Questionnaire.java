package br.ufmg.engsoft.reprova.model;

import java.util.ArrayList;

import br.ufmg.engsoft.reprova.database.QuestionsDAO;
import br.ufmg.engsoft.reprova.model.generator.QuestionnaireGeneration;
import br.ufmg.engsoft.reprova.model.generator.EstimatedTimeCalculator;

/**
 * The Questionnaire type
 */
public class Questionnaire{
  /**
   * The identifier of the questionnaire.
   * When null, the identifier will be automatically generated by the database.
   */
  public final String identifier;
  /**
   * The list of Questions in the Questionnaire
   */
  public final ArrayList<Question> questions;
  /**
   * The Questionnaire's average diffclty.
   */
  public final String avrgdiffclty;
  /**
   * The Questionnaire's total estimated time.
   */
  public int totEstmtdTime;
  
  public static final int ESTMTD_TIME_MINS = 60;
  public static final int QUESTIONS_COUNT = 5;

  public static class Generator{
    protected String identifier;
    protected String avrgdiffclty;
    protected int totEstmtdTime;
    protected int questionsCount;

    public Generator identifier(String identifier){
      this.identifier = identifier;
      return this;
    }

    public Generator avrgdiffclty(String avrgdiffclty){
      this.avrgdiffclty = avrgdiffclty;
      return this;
    }

    public Generator totEstmtdTime(int totEstmtdTime){
      this.totEstmtdTime = totEstmtdTime;
      return this;
    }

    public Generator questionsCount(int questionsCount){
      this.questionsCount = questionsCount;
      return this;
    }

    public Questionnaire generate(QuestionsDAO questionsDAO){
      QuestionnaireGeneration generationChain = new QuestionnaireGeneration();

      Environments environments = Environments.getInstance();
      boolean hasEstimatedTime = environments.isEnEstmtdTime();

      if (hasEstimatedTime){
        generationChain.setNext(new EstimatedTimeCalculator());
      }

      return generationChain.generate(questionsDAO, this.avrgdiffclty, this.questionsCount, this.totEstmtdTime);
    }
  }

  public static class Builder{
    protected String identifier;
    protected String avrgdiffclty;
    protected int totEstmtdTime;
    protected ArrayList<Question> questions;

    public Builder identifier(String identifier){
      this.identifier = identifier;
      return this;
    }

    public Builder avrgdiffclty(String avrgdiffclty){
      this.avrgdiffclty = avrgdiffclty;
      return this;
    }

    public Builder totEstmtdTime(int totEstmtdTime){
      this.totEstmtdTime = totEstmtdTime;
      return this;
    }

    public Builder questions(ArrayList<Question> questions){
      this.questions = questions;
      return this;
    }

    /**
     * Build the Questionnaire;
     * @throws IllegalArgumentException if any parameter is invalid
     */

    public Questionnaire build() {
      if (this.questions == null){
        this.questions = new ArrayList<Question>();
      } else {
        for (var question : this.questions){
          if (question == null){
            throw new IllegalArgumentException("question mustn't be null");
          }
        }
      }

      return new Questionnaire(
        this.identifier,
        this.avrgdiffclty,
        this.totEstmtdTime,
        this.questions
      );
    }
  }

  /**
   * Protected constructor, should only be used by the builder.
   */
  protected Questionnaire(
    String identifier,
    String avrgdiffclty,
    int totEstmtdTime,
    ArrayList<Question> questions
  ){
    this.identifier = identifier;
    this.questions = questions;
    this.avrgdiffclty = avrgdiffclty;
    this.totEstmtdTime = totEstmtdTime;
  }

  /**
   * Convert a Question to String for visualization purposes.
   */
  @Override
  public String toString() {
    var builder = new StringBuilder();

    builder.append("Questionnaire:\n");
    builder.append("  identifier: " + this.identifier + "\n");
    builder.append("  avrgdiffclty: " + this.avrgdiffclty + "\n");
    builder.append("  totEstmtdTime: " + this.totEstmtdTime + "\n");
    builder.append("  questions:\n");
    for (var question : this.questions){
      builder.append("    identifier: " + question.identifier + "\n");
      builder.append("      theme: " + question.theme + "\n");
      builder.append("      desc: " + question.description + "\n");
      builder.append("      record: " + question.record + "\n");
      builder.append("      pvt: " + question.pvt + "\n");
      builder.append("      diffclty: " + question.diffclty + "\n");

      if (question.statement != null) {
        builder.append(
          "  head: " +
          question.statement.substring(
            0,
            Math.min(question.statement.length(), 50)
          ) +
          "\n"
        );
      }
    }

    return builder.toString();
  }
}
